#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080
#define MAX_BUFFER_SIZE 1024

int main() {
    int client_fd;
    struct sockaddr_in server_addr;
    char buffer[MAX_BUFFER_SIZE] = {0};
    char message[MAX_BUFFER_SIZE];
    socklen_t addr_len = sizeof(server_addr);

    // Creating socket file descriptor
    if ((client_fd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    // Set up the server address structure
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    server_addr.sin_addr.s_addr = inet_addr("127.0.0.1"); // Server IP

    while (1) {
        printf("Enter message to send to the server (type 'exit' to quit): ");
        fgets(message, MAX_BUFFER_SIZE, stdin);

        // Remove newline character from user input
        message[strcspn(message, "\n")] = 0;

        // Exit condition
        if (strcmp(message, "exit") == 0) {
            printf("Exiting client.\n");
            break;
        }

        // Send message to the server
        sendto(client_fd, message, strlen(message), 0, (struct sockaddr *)&server_addr, addr_len);
        printf("Message sent to server: %s\n", message);

        // Receive response from the server
        int n = recvfrom(client_fd, buffer, MAX_BUFFER_SIZE, 0, (struct sockaddr *)&server_addr, &addr_len);
        buffer[n] = '\0'; // Null-terminate the buffer
        printf("Server: %s\n", buffer);
    }

    close(client_fd);
    return 0;
}
