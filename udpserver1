#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080
#define MAX_BUFFER_SIZE 1024

int main() {
    int server_fd;
    struct sockaddr_in address, client_addr;
    char buffer[MAX_BUFFER_SIZE] = {0};
    char *response = "Hello from server!";
    socklen_t addr_len = sizeof(client_addr);

    // Creating socket file descriptor
    if ((server_fd = socket(AF_INET, SOCK_DGRAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    // Set up the server address structure
    memset(&address, 0, sizeof(address));
    address.sin_family = AF_INET; // IPv4
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    // Bind the socket to the port
    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }

    printf("Server is running and waiting for messages on port %d...\n", PORT);

    while (1) {
        int n = recvfrom(server_fd, buffer, MAX_BUFFER_SIZE, 0, (struct sockaddr *)&client_addr, &addr_len);
        buffer[n] = '\0'; // Null-terminate the buffer
        printf("Client: %s\n", buffer);

        // Send response to the client
        sendto(server_fd, response, strlen(response), 0, (struct sockaddr *)&client_addr, addr_len);
        printf("Response sent to client\n");
    }

    close(server_fd);
    return 0;
}
